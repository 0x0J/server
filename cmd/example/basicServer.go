// package example is generated by server
package example

import (
	"fmt"
	"github.com/jinzhu/gorm"
	"server"
)

// basicServer is a generated Server, Please comment ---
type basicServer struct {
	id          string
	credentials *server.Credentials
	db          *gorm.DB
}

// NewbasicServer is a function used to initailze a new basicServer object, it will make sure
// that all neccesarry fields are initialized to avoid nil pointer exceptions
// id Should be Unique for each server
func NewbasicServer(id string) *basicServer {
	return &basicServer{
		id:          id,
		credentials: server.NewCredentials(),
	}
}

// Connect should handle a connection to the server
func (s *basicServer) Connect(c *server.Credentials) error {

	/* This example is a Database Application, so we need to validate that DB in Credentials is not nil */
	if c.DB == nil && s.credentials.DB == nil {
		return server.ErrMissingCredentials
	} else if c != nil {
		/* Assign New Credentials to server */
		s.credentials = c
	}
	dbcred := s.credentials.DB
	dbInfo := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable", dbcred.Host, dbcred.Port, dbcred.Username, dbcred.Password, dbcred.DatabaseName)
	db, err := gorm.Open("postgres", dbInfo)
	db.LogMode(true)
	if err != nil {
		return server.ErrFailedToConnect

	}
	/* Assign the database into the struct */
	s.db = db
	return nil

}

// Reconnect should disconnect then reconnect
func (s *basicServer) Reconnect() error {

	err := s.Disconnect()
	if err != nil && err != server.ErrCannotCloseNilDatabase {
		return err
	}
	return s.Connect(s.credentials)

}

// Disconnect should close server connection
func (s *basicServer) Disconnect() error {

	if s.db == nil {
		return server.ErrCannotCloseNilDatabase
	}
	return s.db.Close()

}

// TestConnection should Test connection and Reconnect if failure
func (s *basicServer) TestConnection() error {

	if s.db == nil {
		return s.Reconnect()
	}
	/* Ask Database if connection is OK */
	err := s.db.DB().Ping()
	if err != nil {
		return s.Reconnect()
	}
	return nil

}

// Ping is used to test connection
func (s *basicServer) Ping() error {

	return s.db.DB().Ping()

}

// GetUniqueIdentifier is responsible to return a Unique identifer for each Server object
func (s *basicServer) GetUniqueIdentifier() string {
	return s.id
}

/** Add your own Functions down below */
