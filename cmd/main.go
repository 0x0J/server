package main

import (
	"flag"
	"fmt"
	"html/template"
	"log"
	"os"
)

type newServer struct {
	PackageName string
	ServerName  string
	Location    string
}

func main() {
	var d newServer

	flag.StringVar(&d.PackageName, "package", "", "The name for the generated package")
	flag.StringVar(&d.ServerName, "server", "", "The name of the server object to generate")
	flag.StringVar(&d.Location, "location", "", "Location of the generated output file/Files")
	flag.Parse()

	finfo, err := os.Stat(d.Location)
	if err != nil {
		log.Fatal(err)
	}
	if !finfo.IsDir() {
		log.Fatal("Please specify a directory to generate files in, not a file")
		return
	}

	f, err := os.Create(fmt.Sprintf("%s/%s.go", d.Location, d.ServerName))
	if err != nil {
		log.Fatal(err)
		return
	}
	t := template.Must(template.New("server").Parse(newServerTemplate))
	t.Execute(f, d)
}

// The template for the test file to generate
var newserverTestTemplate = ` 


`

// The template for  the server file
var newServerTemplate = `
// package {{.PackageName}} is generated by server
package {{.PackageName}}

import (
	"server"
)

// {{.ServerName}} is a generated Server, Please comment --- 
type {{.ServerName}} struct {
	id          string
	credentials *server.Credentials
}
// Connect should handle a connection to the server
func (s *{{.ServerName}}) Connect(c *server.Credentials) error{
	return nil
}
// Reconnect should disconnect then reconnect 
func (s *{{.ServerName}}) Reconnect() error{
	return nil
}
// Disconnect should close server connection
func (s *{{.ServerName}}) Disconnect() error{
	return nil
}
// TestConnection should Test connection and Reconnect if failure
func (s *{{.ServerName}}) TestConnection() error{
	return nil
}
// Ping is used to test connection 
func (s *{{.ServerName}}) Ping() error{
	return nil
}
// GetUniqueIdentifier is responsible to return a Unique identifer for each Server object
func (s *{{.ServerName}}) GetUniqueIdentifier() string{
	return ""
}


`
